C51 COMPILER V9.53.0.0   CALLBACK                                                          01/24/2016 18:13:24 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE CALLBACK
OBJECT MODULE PLACED IN .\src/callback.OBJ
COMPILER INVOKED BY: Z:\home\pp\SimplicityStudio_v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe /home/pp/apps/u2f-ze
                    -ro/firmware/src/callback.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(9,SPEED) INTV
                    -ECTOR(0X0000) INTPROMOTE INCDIR(/home/pp/apps/u2f-zero/firmware/inc/config;/home/pp/apps/u2f-zero/firmware/inc;/home/pp/
                    -SimplicityStudio_v3/developer/sdks/si8051/v3//Device/shared/si8051Base;/home/pp/SimplicityStudio_v3/developer/sdks/si805
                    -1/v3//Device/EFM8UB1;/home/pp/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/EFM8UB1/inc;/home/pp/SimplicityStudio
                    -_v3/developer/sdks/si8051/v3//Lib/efm8_usb/inc;/home/pp/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/EFM8UB1/per
                    -ipheral_driver/inc;/home/pp/SimplicityStudio_v3/developer/sdks/si8051/v3//Lib/efm8_assert) REGFILE(u2f-firmware.ORC) PRI
                    -NT(.\src/callback.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/callback.OBJ)

line level    source

   1          /*******************************************************************************
   2           * @file callback.c
   3           * @brief USB Callbacks.
   4           *******************************************************************************/
   5          
   6          //=============================================================================
   7          // src/callback.c: generated by Hardware Configurator
   8          //
   9          // This file is only generated if it does not exist. Modifications in this file
  10          // will persist even if Configurator generates code. To refresh this file,
  11          // you must first delete it and then regenerate code.
  12          //=============================================================================
  13          //-----------------------------------------------------------------------------
  14          // Includes
  15          //-----------------------------------------------------------------------------
  16          #include <SI_EFM8UB1_Register_Enums.h>
  17          #include <efm8_usb.h>
  18          #include <stdio.h>
  19          #include "idle.h"
  20          #include "bsp.h"
  21          #include "descriptors.h"
  22          
  23          //-----------------------------------------------------------------------------
  24          // Constants
  25          //-----------------------------------------------------------------------------
  26          #define HID_KEYBOARD_IFC                  0
  27          //-----------------------------------------------------------------------------
  28          // Variables
  29          //-----------------------------------------------------------------------------
  30          // uint8_t thebuf1[32];
  31          SI_SEGMENT_VARIABLE(thebuf1[64], uint8_t, SI_SEG_XDATA);
  32          uint8_t tmpBuffer;
  33          extern bool readpacket;
  34          //SI_SEGMENT_VARIABLE(thebuf1[32],
  35          //              uint8_t,
  36          //              SI_SEG_CODE);
  37          //-----------------------------------------------------------------------------
  38          // Functions
  39          //-----------------------------------------------------------------------------
  40          
  41          void USBD_EnterHandler(void) {
  42   1      
  43   1      }
  44          
  45          void USBD_ExitHandler(void) {
  46   1      
  47   1      }
  48          
  49          void USBD_ResetCb(void) {
C51 COMPILER V9.53.0.0   CALLBACK                                                          01/24/2016 18:13:24 PAGE 2   

  50   1              printf("USBD_ResetCb\r\n");
  51   1      }
  52          
  53          void USBD_SofCb(uint16_t sofNr) {
  54   1      
  55   1      }
*** WARNING C280 IN LINE 53 OF /home/pp/apps/u2f-zero/firmware/src/callback.c: 'sofNr': unreferenced local variable
  56          
  57          void USBD_DeviceStateChangeCb(USBD_State_TypeDef oldState,
  58                          USBD_State_TypeDef newState) {
  59   1              printf("USBD_DeviceStateChangeCb\r\n");
  60   1      }
*** WARNING C280 IN LINE 57 OF /home/pp/apps/u2f-zero/firmware/src/callback.c: 'oldState': unreferenced local variable
*** WARNING C280 IN LINE 58 OF /home/pp/apps/u2f-zero/firmware/src/callback.c: 'newState': unreferenced local variable
  61          
  62          bool USBD_IsSelfPoweredCb(void) {
  63   1              printf("USBD_IsSelfPoweredCb\r\n");
  64   1              return false;
  65   1      }
  66          
  67          
  68          
  69          
  70          USB_Status_TypeDef USBD_SetupCmdCb(
  71                          SI_VARIABLE_SEGMENT_POINTER(setup, USB_Setup_TypeDef, MEM_MODEL_SEG)) {
  72   1              USB_Status_TypeDef retVal = USB_STATUS_REQ_UNHANDLED;
  73   1              int i;
  74   1      
  75   1      
  76   1      
  77   1      
  78   1      
  79   1      
  80   1              if ((setup->bmRequestType.Type == USB_SETUP_TYPE_STANDARD)
  81   1                              && (setup->bmRequestType.Direction == USB_SETUP_DIR_IN)
  82   1                              && (setup->bmRequestType.Recipient == USB_SETUP_RECIPIENT_INTERFACE)) {
  83   2                      // A HID device must extend the standard GET_DESCRIPTOR command
  84   2                      // with support for HID descriptors.
  85   2      
  86   2                      switch (setup->bRequest) {
  87   3                      case GET_DESCRIPTOR:
  88   3                              if ((setup->wValue >> 8) == USB_HID_REPORT_DESCRIPTOR) {
  89   4                                      switch (setup->wIndex) {
  90   5                                      case 0: // Interface 0
  91   5                                              USBD_Write(EP0, ReportDescriptor0,
  92   5                                                              EFM8_MIN(sizeof(ReportDescriptor0), setup->wLength),
  93   5                                                              false);
  94   5                                              retVal = USB_STATUS_OK;
  95   5                                              break;
  96   5      
  97   5                                      default: // Unhandled Interface
  98   5                                              break;
  99   5                                      }
 100   4                              } else if ((setup->wValue >> 8) == USB_HID_DESCRIPTOR) {
 101   4                                      switch (setup->wIndex) {
 102   5                                      case 0: // Interface 0
 103   5                                              USBD_Write(EP0, (&configDesc[18]),
 104   5                                                              EFM8_MIN(USB_HID_DESCSIZE, setup->wLength), false);
 105   5                                              retVal = USB_STATUS_OK;
 106   5                                              break;
 107   5      
 108   5                                      default: // Unhandled Interface
 109   5                                              break;
C51 COMPILER V9.53.0.0   CALLBACK                                                          01/24/2016 18:13:24 PAGE 3   

 110   5                                      }
 111   4                              }
 112   3                              break;
 113   3                      }
 114   2              }
 115   1              else if ((setup->bmRequestType.Type == USB_SETUP_TYPE_CLASS)
 116   1                         && (setup->bmRequestType.Recipient == USB_SETUP_RECIPIENT_INTERFACE)
 117   1                         && (setup->wIndex == HID_KEYBOARD_IFC))
 118   1                {
 119   2                  // Implement the necessary HID class specific commands.
 120   2                  switch (setup->bRequest)
 121   2                  {
 122   3                    case USB_HID_SET_REPORT:
 123   3                        printf("output report\r\n");
 124   3                      break;
 125   3      
 126   3                    case USB_HID_GET_REPORT:
 127   3                        printf("input report\r\n");
 128   3                        if ( USBD_Read(EP1OUT, thebuf1, sizeof(thebuf1), true) != USB_STATUS_OK)
 129   3                                printf("ERROR not ready\n");
 130   3      
 131   3                      break;
 132   3      
 133   3                    case USB_HID_SET_IDLE:
 134   3                      if (((setup->wValue & 0xFF) == 0)             // Report ID
 135   3                          && (setup->wLength == 0)
 136   3                          && (setup->bmRequestType.Direction != USB_SETUP_DIR_IN))
 137   3                      {
 138   4                              printf("set idle\r\n");
 139   4                        idleTimerSet(setup->wValue >> 8);
 140   4                        retVal = USB_STATUS_OK;
 141   4                      }
 142   3                      else printf("unhandled USB_HID_SET_IDLE\r\n");
 143   3                      break;
 144   3      
 145   3                    case USB_HID_GET_IDLE:
 146   3                      if ((setup->wValue == 0)                      // Report ID
 147   3                          && (setup->wLength == 1)
 148   3                          && (setup->bmRequestType.Direction == USB_SETUP_DIR_IN))
 149   3                      {
 150   4                              printf("get idle\r\n");
 151   4                        tmpBuffer = idleGetRate();
 152   4                        USBD_Write(EP0, &tmpBuffer, 1, false);
 153   4                        retVal = USB_STATUS_OK;
 154   4                      }
 155   3                      else printf("unhandled USB_HID_GET_IDLE\r\n");
 156   3                      break;
 157   3                    default:
 158   3                        printf("unhandled setup->bRequest\r\n");
 159   3                  }
 160   2                }
 161   1                else
 162   1                {
 163   2                        if (setup->bmRequestType.Recipient == USB_SETUP_RECIPIENT_ENDPOINT)
 164   2                                printf("endpoint called!\n");
 165   2                        // printf("NOT HANDLED\r\n");
 166   2                }
 167   1      
 168   1              return retVal;
 169   1      }
*** WARNING C280 IN LINE 73 OF /home/pp/apps/u2f-zero/firmware/src/callback.c: 'i': unreferenced local variable
 170          
 171          //SI_SEGMENT_VARIABLE(testtx[],
C51 COMPILER V9.53.0.0   CALLBACK                                                          01/24/2016 18:13:24 PAGE 4   

 172          //              uint8_t,
 173          //              SI_SEG_CODE) =
 174          // "\x00\xff\xff\xff\xff\x86\x00\x08\x08\x07\x06\x05\x04\x03\x02\x01\x00\x00\x00\x00\x00\x00\x00"
 175          //              "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
             -x00\x00"
 176          //              "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
 177          
 178          uint16_t USBD_XferCompleteCb(uint8_t epAddr, USB_Status_TypeDef status,
 179                          uint16_t xferred, uint16_t remaining) {
 180   1      
 181   1              int i = 0;
 182   1      
 183   1      
 184   1      
 185   1      
 186   1              if (epAddr == EP1OUT)
 187   1              {
 188   2                      printf("USBD_XferCompleteCb read 0x%x/0x%x \r\n", xferred, remaining);
 189   2      
 190   2                      for (i=0; i < sizeof(thebuf1); i++)
 191   2                      {
 192   3                              uint16_t l = (uint8_t)thebuf1[i];
 193   3                              printf("%x",l);
 194   3      
 195   3                      }
 196   2                      printf("\n");
 197   2                      readpacket = 1;
 198   2      
 199   2              }
 200   1              return 0;
 201   1      }
*** WARNING C280 IN LINE 178 OF /home/pp/apps/u2f-zero/firmware/src/callback.c: 'status': unreferenced local variable
 202          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    598    ----
   CONSTANT SIZE    =    282    ----
   XDATA SIZE       =     64    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
