C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src/InitDevice.OBJ
COMPILER INVOKED BY: Z:\home\pp\SimplicityStudio_v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe /home/pp/apps/u2f-ze
                    -ro/firmware/src/InitDevice.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(9,SIZE) INT
                    -VECTOR(0X0000) INTPROMOTE INCDIR(/home/pp/apps/u2f-zero/firmware/inc/config;/home/pp/apps/u2f-zero/firmware/inc;/home/pp
                    -/apps/u2f-zero/firmware/tests;/home/pp/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/shared/si8051Base;/home/pp/S
                    -implicityStudio_v3/developer/sdks/si8051/v3//Device/EFM8UB1;/home/pp/SimplicityStudio_v3/developer/sdks/si8051/v3//Devic
                    -e/EFM8UB1/inc;/home/pp/SimplicityStudio_v3/developer/sdks/si8051/v3//Lib/efm8_usb/inc;/home/pp/SimplicityStudio_v3/devel
                    -oper/sdks/si8051/v3//Device/EFM8UB1/peripheral_driver/inc;/home/pp/SimplicityStudio_v3/developer/sdks/si8051/v3//Lib/efm
                    -8_assert) REGFILE(u2f-firmware.ORC) PRINT(.\src/InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/InitDevi
                    -ce.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8UB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          #include "efm8_usb.h"
  18          #include "descriptors.h"
  19          #include "usb_0.h"
  20          // [Library Includes]$
  21          
  22          //==============================================================================
  23          // enter_DefaultMode_from_RESET
  24          //==============================================================================
  25          extern void enter_DefaultMode_from_RESET(void) {
  26   1              // $[Config Calls]
  27   1              // Save the SFRPAGE
  28   1              uint8_t SFRPAGE_save = SFRPAGE;
  29   1              WDT_0_enter_DefaultMode_from_RESET();
  30   1              VREG_0_enter_DefaultMode_from_RESET();
  31   1              PORTS_0_enter_DefaultMode_from_RESET();
  32   1              PORTS_1_enter_DefaultMode_from_RESET();
  33   1              PBCFG_0_enter_DefaultMode_from_RESET();
  34   1              CIP51_0_enter_DefaultMode_from_RESET();
  35   1              CLOCK_0_enter_DefaultMode_from_RESET();
  36   1              TIMER01_0_enter_DefaultMode_from_RESET();
  37   1              TIMER16_2_enter_DefaultMode_from_RESET();
  38   1              TIMER16_3_enter_DefaultMode_from_RESET();
  39   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  40   1              PCA_0_enter_DefaultMode_from_RESET();
  41   1              PCACH_0_enter_DefaultMode_from_RESET();
  42   1              PCACH_1_enter_DefaultMode_from_RESET();
  43   1              PCACH_2_enter_DefaultMode_from_RESET();
  44   1              SMBUS_0_enter_DefaultMode_from_RESET();
  45   1              UART_0_enter_DefaultMode_from_RESET();
  46   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  47   1              USBLIB_0_enter_DefaultMode_from_RESET();
  48   1              // Restore the SFRPAGE
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 2   

  49   1              SFRPAGE = SFRPAGE_save;
  50   1              // [Config Calls]$
  51   1      
  52   1      }
  53          
  54          //================================================================================
  55          // WDT_0_enter_DefaultMode_from_RESET
  56          //================================================================================
  57          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  58   1              // $[WDTCN - Watchdog Timer Control]
  59   1              SFRPAGE = 0x00;
  60   1              //Disable Watchdog with key sequence
  61   1              WDTCN = 0xDE; //First key
  62   1              WDTCN = 0xAD; //Second key
  63   1              // [WDTCN - Watchdog Timer Control]$
  64   1      
  65   1      }
  66          
  67          //================================================================================
  68          // VREG_0_enter_DefaultMode_from_RESET
  69          //================================================================================
  70          extern void VREG_0_enter_DefaultMode_from_RESET(void) {
  71   1              // $[REG0CN - Voltage Regulator 0 Control]
  72   1              // [REG0CN - Voltage Regulator 0 Control]$
  73   1      
  74   1              // $[REG1CN - Voltage Regulator 1 Control]
  75   1              /*
  76   1               // REG1ENB (Voltage Regulator 1 Disable) = ENABLED (Regulator is
  77   1               //     enabled.)
  78   1               // BIASENB (Regulator Bias Disable) = DISABLED (Regulator bias is
  79   1               //     disabled.)
  80   1               // SUSEN (Voltage Regulator 1 Suspend Enable) = NORMAL (The 5V regulator
  81   1               //     is in normal power mode. Normal mode is the highest performance mode
  82   1               //     for the regulator.)
  83   1               */
  84   1              SFRPAGE = 0x20;
  85   1              REG1CN = REG1CN_REG1ENB__ENABLED | REG1CN_BIASENB__DISABLED
  86   1                              | REG1CN_SUSEN__NORMAL;
  87   1              // [REG1CN - Voltage Regulator 1 Control]$
  88   1      
  89   1      }
  90          
  91          //================================================================================
  92          // PORTS_0_enter_DefaultMode_from_RESET
  93          //================================================================================
  94          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  95   1              // $[P0 - Port 0 Pin Latch]
  96   1              /*
  97   1               // B0 (Port 0 Bit 0 Latch) = HIGH (P0.0 is high. Set P0.0 to drive or
  98   1               //     float high.)
  99   1               // B1 (Port 0 Bit 1 Latch) = HIGH (P0.1 is high. Set P0.1 to drive or
 100   1               //     float high.)
 101   1               // B2 (Port 0 Bit 2 Latch) = HIGH (P0.2 is high. Set P0.2 to drive or
 102   1               //     float high.)
 103   1               // B3 (Port 0 Bit 3 Latch) = HIGH (P0.3 is high. Set P0.3 to drive or
 104   1               //     float high.)
 105   1               // B4 (Port 0 Bit 4 Latch) = HIGH (P0.4 is high. Set P0.4 to drive or
 106   1               //     float high.)
 107   1               // B5 (Port 0 Bit 5 Latch) = HIGH (P0.5 is high. Set P0.5 to drive or
 108   1               //     float high.)
 109   1               // B6 (Port 0 Bit 6 Latch) = HIGH (P0.6 is high. Set P0.6 to drive or
 110   1               //     float high.)
 111   1               // B7 (Port 0 Bit 7 Latch) = HIGH (P0.7 is high. Set P0.7 to drive or
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 3   

 112   1               //     float high.)
 113   1               */
 114   1              SFRPAGE = 0x00;
 115   1              P0 = P0_B0__HIGH | P0_B1__HIGH | P0_B2__HIGH | P0_B3__HIGH | P0_B4__HIGH
 116   1                              | P0_B5__HIGH | P0_B6__HIGH | P0_B7__HIGH;
 117   1              // [P0 - Port 0 Pin Latch]$
 118   1      
 119   1              // $[P0MDOUT - Port 0 Output Mode]
 120   1              /*
 121   1               // B0 (Port 0 Bit 0 Output Mode) = OPEN_DRAIN (P0.0 output is open-
 122   1               //     drain.)
 123   1               // B1 (Port 0 Bit 1 Output Mode) = OPEN_DRAIN (P0.1 output is open-
 124   1               //     drain.)
 125   1               // B2 (Port 0 Bit 2 Output Mode) = PUSH_PULL (P0.2 output is push-pull.)
 126   1               // B3 (Port 0 Bit 3 Output Mode) = PUSH_PULL (P0.3 output is push-pull.)
 127   1               // B4 (Port 0 Bit 4 Output Mode) = PUSH_PULL (P0.4 output is push-pull.)
 128   1               // B5 (Port 0 Bit 5 Output Mode) = OPEN_DRAIN (P0.5 output is open-
 129   1               //     drain.)
 130   1               // B6 (Port 0 Bit 6 Output Mode) = PUSH_PULL (P0.6 output is push-pull.)
 131   1               // B7 (Port 0 Bit 7 Output Mode) = PUSH_PULL (P0.7 output is push-pull.)
 132   1               */
 133   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
 134   1                              | P0MDOUT_B2__PUSH_PULL | P0MDOUT_B3__PUSH_PULL
 135   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__OPEN_DRAIN
 136   1                              | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__PUSH_PULL;
 137   1              // [P0MDOUT - Port 0 Output Mode]$
 138   1      
 139   1              // $[P0MDIN - Port 0 Input Mode]
 140   1              /*
 141   1               // B0 (Port 0 Bit 0 Input Mode) = DIGITAL (P0.0 pin is configured for
 142   1               //     digital mode.)
 143   1               // B1 (Port 0 Bit 1 Input Mode) = DIGITAL (P0.1 pin is configured for
 144   1               //     digital mode.)
 145   1               // B2 (Port 0 Bit 2 Input Mode) = DIGITAL (P0.2 pin is configured for
 146   1               //     digital mode.)
 147   1               // B3 (Port 0 Bit 3 Input Mode) = DIGITAL (P0.3 pin is configured for
 148   1               //     digital mode.)
 149   1               // B4 (Port 0 Bit 4 Input Mode) = DIGITAL (P0.4 pin is configured for
 150   1               //     digital mode.)
 151   1               // B5 (Port 0 Bit 5 Input Mode) = DIGITAL (P0.5 pin is configured for
 152   1               //     digital mode.)
 153   1               // B6 (Port 0 Bit 6 Input Mode) = DIGITAL (P0.6 pin is configured for
 154   1               //     digital mode.)
 155   1               // B7 (Port 0 Bit 7 Input Mode) = DIGITAL (P0.7 pin is configured for
 156   1               //     digital mode.)
 157   1               */
 158   1              P0MDIN = P0MDIN_B0__DIGITAL | P0MDIN_B1__DIGITAL | P0MDIN_B2__DIGITAL
 159   1                              | P0MDIN_B3__DIGITAL | P0MDIN_B4__DIGITAL | P0MDIN_B5__DIGITAL
 160   1                              | P0MDIN_B6__DIGITAL | P0MDIN_B7__DIGITAL;
 161   1              // [P0MDIN - Port 0 Input Mode]$
 162   1      
 163   1              // $[P0SKIP - Port 0 Skip]
 164   1              /*
 165   1               // B0 (Port 0 Bit 0 Skip) = NOT_SKIPPED (P0.0 pin is not skipped by the
 166   1               //     crossbar.)
 167   1               // B1 (Port 0 Bit 1 Skip) = NOT_SKIPPED (P0.1 pin is not skipped by the
 168   1               //     crossbar.)
 169   1               // B2 (Port 0 Bit 2 Skip) = SKIPPED (P0.2 pin is skipped by the
 170   1               //     crossbar.)
 171   1               // B3 (Port 0 Bit 3 Skip) = SKIPPED (P0.3 pin is skipped by the
 172   1               //     crossbar.)
 173   1               // B4 (Port 0 Bit 4 Skip) = NOT_SKIPPED (P0.4 pin is not skipped by the
 174   1               //     crossbar.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 4   

 175   1               // B5 (Port 0 Bit 5 Skip) = NOT_SKIPPED (P0.5 pin is not skipped by the
 176   1               //     crossbar.)
 177   1               // B6 (Port 0 Bit 6 Skip) = NOT_SKIPPED (P0.6 pin is not skipped by the
 178   1               //     crossbar.)
 179   1               // B7 (Port 0 Bit 7 Skip) = NOT_SKIPPED (P0.7 pin is not skipped by the
 180   1               //     crossbar.)
 181   1               */
 182   1              P0SKIP = P0SKIP_B0__NOT_SKIPPED | P0SKIP_B1__NOT_SKIPPED
 183   1                              | P0SKIP_B2__SKIPPED | P0SKIP_B3__SKIPPED | P0SKIP_B4__NOT_SKIPPED
 184   1                              | P0SKIP_B5__NOT_SKIPPED | P0SKIP_B6__NOT_SKIPPED
 185   1                              | P0SKIP_B7__NOT_SKIPPED;
 186   1              // [P0SKIP - Port 0 Skip]$
 187   1      
 188   1              // $[P0MASK - Port 0 Mask]
 189   1              /*
 190   1               // B0 (Port 0 Bit 0 Mask Value) = IGNORED (P0.0 pin logic value is
 191   1               //     ignored and will not cause a port mismatch event.)
 192   1               // B1 (Port 0 Bit 1 Mask Value) = IGNORED (P0.1 pin logic value is
 193   1               //     ignored and will not cause a port mismatch event.)
 194   1               // B2 (Port 0 Bit 2 Mask Value) = IGNORED (P0.2 pin logic value is
 195   1               //     ignored and will not cause a port mismatch event.)
 196   1               // B3 (Port 0 Bit 3 Mask Value) = IGNORED (P0.3 pin logic value is
 197   1               //     ignored and will not cause a port mismatch event.)
 198   1               // B4 (Port 0 Bit 4 Mask Value) = IGNORED (P0.4 pin logic value is
 199   1               //     ignored and will not cause a port mismatch event.)
 200   1               // B5 (Port 0 Bit 5 Mask Value) = IGNORED (P0.5 pin logic value is
 201   1               //     ignored and will not cause a port mismatch event.)
 202   1               // B6 (Port 0 Bit 6 Mask Value) = IGNORED (P0.6 pin logic value is
 203   1               //     ignored and will not cause a port mismatch event.)
 204   1               // B7 (Port 0 Bit 7 Mask Value) = IGNORED (P0.7 pin logic value is
 205   1               //     ignored and will not cause a port mismatch event.)
 206   1               */
 207   1              P0MASK = P0MASK_B0__IGNORED | P0MASK_B1__IGNORED | P0MASK_B2__IGNORED
 208   1                              | P0MASK_B3__IGNORED | P0MASK_B4__IGNORED | P0MASK_B5__IGNORED
 209   1                              | P0MASK_B6__IGNORED | P0MASK_B7__IGNORED;
 210   1              // [P0MASK - Port 0 Mask]$
 211   1      
 212   1              // $[P0MAT - Port 0 Match]
 213   1              /*
 214   1               // B0 (Port 0 Bit 0 Match Value) = HIGH (P0.0 pin logic value is compared
 215   1               //     with logic HIGH.)
 216   1               // B1 (Port 0 Bit 1 Match Value) = HIGH (P0.1 pin logic value is compared
 217   1               //     with logic HIGH.)
 218   1               // B2 (Port 0 Bit 2 Match Value) = HIGH (P0.2 pin logic value is compared
 219   1               //     with logic HIGH.)
 220   1               // B3 (Port 0 Bit 3 Match Value) = HIGH (P0.3 pin logic value is compared
 221   1               //     with logic HIGH.)
 222   1               // B4 (Port 0 Bit 4 Match Value) = HIGH (P0.4 pin logic value is compared
 223   1               //     with logic HIGH.)
 224   1               // B5 (Port 0 Bit 5 Match Value) = HIGH (P0.5 pin logic value is compared
 225   1               //     with logic HIGH.)
 226   1               // B6 (Port 0 Bit 6 Match Value) = HIGH (P0.6 pin logic value is compared
 227   1               //     with logic HIGH.)
 228   1               // B7 (Port 0 Bit 7 Match Value) = HIGH (P0.7 pin logic value is compared
 229   1               //     with logic HIGH.)
 230   1               */
 231   1              P0MAT = P0MAT_B0__HIGH | P0MAT_B1__HIGH | P0MAT_B2__HIGH | P0MAT_B3__HIGH
 232   1                              | P0MAT_B4__HIGH | P0MAT_B5__HIGH | P0MAT_B6__HIGH | P0MAT_B7__HIGH;
 233   1              // [P0MAT - Port 0 Match]$
 234   1      
 235   1      }
 236          
 237          //================================================================================
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 5   

 238          // PORTS_1_enter_DefaultMode_from_RESET
 239          //================================================================================
 240          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 241   1              // $[P1 - Port 1 Pin Latch]
 242   1              /*
 243   1               // B0 (Port 1 Bit 0 Latch) = HIGH (P1.0 is high. Set P1.0 to drive or
 244   1               //     float high.)
 245   1               // B1 (Port 1 Bit 1 Latch) = HIGH (P1.1 is high. Set P1.1 to drive or
 246   1               //     float high.)
 247   1               // B2 (Port 1 Bit 2 Latch) = HIGH (P1.2 is high. Set P1.2 to drive or
 248   1               //     float high.)
 249   1               */
 250   1              P1 = P1_B0__HIGH | P1_B1__HIGH | P1_B2__HIGH;
 251   1              // [P1 - Port 1 Pin Latch]$
 252   1      
 253   1              // $[P1MDOUT - Port 1 Output Mode]
 254   1              /*
 255   1               // B0 (Port 1 Bit 0 Output Mode) = PUSH_PULL (P1.0 output is push-pull.)
 256   1               // B1 (Port 1 Bit 1 Output Mode) = OPEN_DRAIN (P1.1 output is open-
 257   1               //     drain.)
 258   1               // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 259   1               //     drain.)
 260   1               */
 261   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__OPEN_DRAIN
 262   1                              | P1MDOUT_B2__OPEN_DRAIN;
 263   1              // [P1MDOUT - Port 1 Output Mode]$
 264   1      
 265   1              // $[P1MDIN - Port 1 Input Mode]
 266   1              /*
 267   1               // B0 (Port 1 Bit 0 Input Mode) = DIGITAL (P1.0 pin is configured for
 268   1               //     digital mode.)
 269   1               // B1 (Port 1 Bit 1 Input Mode) = DIGITAL (P1.1 pin is configured for
 270   1               //     digital mode.)
 271   1               // B2 (Port 1 Bit 2 Input Mode) = DIGITAL (P1.2 pin is configured for
 272   1               //     digital mode.)
 273   1               */
 274   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__DIGITAL | P1MDIN_B2__DIGITAL;
 275   1              // [P1MDIN - Port 1 Input Mode]$
 276   1      
 277   1              // $[P1SKIP - Port 1 Skip]
 278   1              /*
 279   1               // B0 (Port 1 Bit 0 Skip) = NOT_SKIPPED (P1.0 pin is not skipped by the
 280   1               //     crossbar.)
 281   1               // B1 (Port 1 Bit 1 Skip) = NOT_SKIPPED (P1.1 pin is not skipped by the
 282   1               //     crossbar.)
 283   1               // B2 (Port 1 Bit 2 Skip) = NOT_SKIPPED (P1.2 pin is not skipped by the
 284   1               //     crossbar.)
 285   1               */
 286   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__NOT_SKIPPED
 287   1                              | P1SKIP_B2__NOT_SKIPPED;
 288   1              // [P1SKIP - Port 1 Skip]$
 289   1      
 290   1              // $[P1MASK - Port 1 Mask]
 291   1              /*
 292   1               // B0 (Port 1 Bit 0 Mask Value) = IGNORED (P1.0 pin logic value is
 293   1               //     ignored and will not cause a port mismatch event.)
 294   1               // B1 (Port 1 Bit 1 Mask Value) = IGNORED (P1.1 pin logic value is
 295   1               //     ignored and will not cause a port mismatch event.)
 296   1               // B2 (Port 1 Bit 2 Mask Value) = IGNORED (P1.2 pin logic value is
 297   1               //     ignored and will not cause a port mismatch event.)
 298   1               */
 299   1              P1MASK = P1MASK_B0__IGNORED | P1MASK_B1__IGNORED | P1MASK_B2__IGNORED;
 300   1              // [P1MASK - Port 1 Mask]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 6   

 301   1      
 302   1              // $[P1MAT - Port 1 Match]
 303   1              /*
 304   1               // B0 (Port 1 Bit 0 Match Value) = HIGH (P1.0 pin logic value is compared
 305   1               //     with logic HIGH.)
 306   1               // B1 (Port 1 Bit 1 Match Value) = HIGH (P1.1 pin logic value is compared
 307   1               //     with logic HIGH.)
 308   1               // B2 (Port 1 Bit 2 Match Value) = HIGH (P1.2 pin logic value is compared
 309   1               //     with logic HIGH.)
 310   1               */
 311   1              P1MAT = P1MAT_B0__HIGH | P1MAT_B1__HIGH | P1MAT_B2__HIGH;
 312   1              // [P1MAT - Port 1 Match]$
 313   1      
 314   1      }
 315          
 316          //================================================================================
 317          // PORTS_2_enter_DefaultMode_from_RESET
 318          //================================================================================
 319          extern void PORTS_2_enter_DefaultMode_from_RESET(void) {
 320   1              // $[P2 - Port 2 Pin Latch]
 321   1              /*
 322   1               // B0 (Port 2 Bit 0 Latch) = HIGH (P2.0 is high. Set P2.0 to drive or
 323   1               //     float high.)
 324   1               */
 325   1              P2 = P2_B0__HIGH;
 326   1              // [P2 - Port 2 Pin Latch]$
 327   1      
 328   1              // $[P2MDOUT - Port 2 Output Mode]
 329   1              /*
 330   1               // B0 (Port 2 Bit 0 Output Mode) = OPEN_DRAIN (P2.0 output is open-
 331   1               //     drain.)
 332   1               */
 333   1              P2MDOUT = P2MDOUT_B0__OPEN_DRAIN;
 334   1              // [P2MDOUT - Port 2 Output Mode]$
 335   1      
 336   1              // $[P2MDIN - Port 2 Input Mode]
 337   1              /*
 338   1               // B0 (Port 2 Bit 0 Input Mode) = DIGITAL (P2.0 pin is configured for
 339   1               //     digital mode.)
 340   1               */
 341   1              SFRPAGE = 0x20;
 342   1              P2MDIN = P2MDIN_B0__DIGITAL;
 343   1              // [P2MDIN - Port 2 Input Mode]$
 344   1      
 345   1              // $[P2SKIP - Port 2 Skip]
 346   1              /*
 347   1               // B0 (Port 2 Bit 0 Skip) = SKIPPED (P2.0 pin is skipped by the
 348   1               //     crossbar.)
 349   1               */
 350   1              P2SKIP = P2SKIP_B0__SKIPPED;
 351   1              // [P2SKIP - Port 2 Skip]$
 352   1      
 353   1              // $[P2MASK - Port 2 Mask]
 354   1              /*
 355   1               // B0 (Port 2 Bit 0 Mask Value) = IGNORED (P2.0 pin logic value is
 356   1               //     ignored and will not cause a port mismatch event.)
 357   1               */
 358   1              P2MASK = P2MASK_B0__IGNORED;
 359   1              // [P2MASK - Port 2 Mask]$
 360   1      
 361   1              // $[P2MAT - Port 2 Match]
 362   1              /*
 363   1               // B0 (Port 2 Bit 0 Match Value) = HIGH (P2.0 pin logic value is compared
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 7   

 364   1               //     with logic HIGH.)
 365   1               */
 366   1              P2MAT = P2MAT_B0__HIGH;
 367   1              // [P2MAT - Port 2 Match]$
 368   1      
 369   1      }
 370          
 371          //================================================================================
 372          // PBCFG_0_enter_DefaultMode_from_RESET
 373          //================================================================================
 374          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 375   1              // $[XBR2 - Port I/O Crossbar 2]
 376   1              /*
 377   1               // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 378   1               //     Pullups enabled (except for Ports whose I/O are configured for analog
 379   1               //     mode).)
 380   1               // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 381   1               // URT1E (UART1 I/O Enable) = DISABLED (UART1 I/O unavailable at Port
 382   1               //     pin.)
 383   1               // URT1RTSE (UART1 RTS Output Enable) = DISABLED (UART1 RTS1 unavailable
 384   1               //     at Port pin.)
 385   1               // URT1CTSE (UART1 CTS Input Enable) = DISABLED (UART1 CTS1 unavailable
 386   1               //     at Port pin.)
 387   1               */
 388   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 389   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 390   1                              | XBR2_URT1CTSE__DISABLED;
 391   1              // [XBR2 - Port I/O Crossbar 2]$
 392   1      
 393   1              // $[PRTDRV - Port Drive Strength]
 394   1              // [PRTDRV - Port Drive Strength]$
 395   1      
 396   1              // $[XBR0 - Port I/O Crossbar 0]
 397   1              /*
 398   1               // URT0E (UART0 I/O Enable) = ENABLED (UART0 TX0, RX0 routed to Port pins
 399   1               //     P0.4 and P0.5.)
 400   1               // SPI0E (SPI I/O Enable) = DISABLED (SPI I/O unavailable at Port pins.)
 401   1               // SMB0E (SMB0 I/O Enable) = ENABLED (SMBus 0 I/O routed to Port pins.)
 402   1               // CP0E (Comparator0 Output Enable) = DISABLED (CP0 unavailable at Port
 403   1               //     pin.)
 404   1               // CP0AE (Comparator0 Asynchronous Output Enable) = DISABLED
 405   1               //     (Asynchronous CP0 unavailable at Port pin.)
 406   1               // CP1E (Comparator1 Output Enable) = DISABLED (CP1 unavailable at Port
 407   1               //     pin.)
 408   1               // CP1AE (Comparator1 Asynchronous Output Enable) = DISABLED
 409   1               //     (Asynchronous CP1 unavailable at Port pin.)
 410   1               // SYSCKE (SYSCLK Output Enable) = DISABLED (SYSCLK unavailable at Port
 411   1               //     pin.)
 412   1               */
 413   1              XBR0 = XBR0_URT0E__ENABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__ENABLED
 414   1                              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 415   1                              | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 416   1              // [XBR0 - Port I/O Crossbar 0]$
 417   1      
 418   1              // $[XBR1 - Port I/O Crossbar 1]
 419   1              /*
 420   1               // PCA0ME (PCA Module I/O Enable) = CEX0_CEX1_CEX2 (CEX0, CEX1, CEX2
 421   1               //     routed to Port pins.)
 422   1               // ECIE (PCA0 External Counter Input Enable) = DISABLED (ECI unavailable
 423   1               //     at Port pin.)
 424   1               // T0E (T0 Enable) = DISABLED (T0 unavailable at Port pin.)
 425   1               // T1E (T1 Enable) = DISABLED (T1 unavailable at Port pin.)
 426   1               // T2E (T2 Enable) = DISABLED (T2 unavailable at Port pin.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 8   

 427   1               */
 428   1              XBR1 = XBR1_PCA0ME__CEX0_CEX1_CEX2 | XBR1_ECIE__DISABLED
 429   1                              | XBR1_T0E__DISABLED | XBR1_T1E__DISABLED | XBR1_T2E__DISABLED;
 430   1              // [XBR1 - Port I/O Crossbar 1]$
 431   1      
 432   1      }
 433          
 434          //================================================================================
 435          // CIP51_0_enter_DefaultMode_from_RESET
 436          //================================================================================
 437          extern void CIP51_0_enter_DefaultMode_from_RESET(void) {
 438   1              // $[PFE0CN - Prefetch Engine Control]
 439   1              /*
 440   1               // PFEN (Prefetch Enable) = ENABLED (Enable the prefetch engine (SYSCLK >
 441   1               //     25 MHz).)
 442   1               // FLRT (Flash Read Timing) = SYSCLK_BELOW_50_MHZ (SYSCLK < 50 MHz.)
 443   1               */
 444   1              SFRPAGE = 0x10;
 445   1              PFE0CN = PFE0CN_PFEN__ENABLED | PFE0CN_FLRT__SYSCLK_BELOW_50_MHZ;
 446   1              // [PFE0CN - Prefetch Engine Control]$
 447   1      
 448   1      }
 449          
 450          //================================================================================
 451          // CLOCK_0_enter_DefaultMode_from_RESET
 452          //================================================================================
 453          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 454   1              // $[HFOSC1 Setup]
 455   1              // Ensure SYSCLK is > 24 MHz before switching to HFOSC1
 456   1              SFRPAGE = 0x00;
 457   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 458   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 459   1              while (CLKSEL & CLKSEL_DIVRDY__BMASK == CLKSEL_DIVRDY__NOT_READY)
 460   1                      ;
 461   1              // [HFOSC1 Setup]$
 462   1      
 463   1              // $[CLKSEL - Clock Select]
 464   1              /*
 465   1               // CLKSL (Clock Source Select) = HFOSC1 (Clock derived from the Internal
 466   1               //     High Frequency Oscillator 1.)
 467   1               // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
 468   1               //     selected clock source divided by 1.)
 469   1               // CLKSL (Clock Source Select) = HFOSC1 (Clock derived from the Internal
 470   1               //     High Frequency Oscillator 1.)
 471   1               // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
 472   1               //     selected clock source divided by 1.)
 473   1               */
 474   1              CLKSEL = CLKSEL_CLKSL__HFOSC1 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 475   1              CLKSEL = CLKSEL_CLKSL__HFOSC1 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 476   1              while (CLKSEL & CLKSEL_DIVRDY__BMASK == CLKSEL_DIVRDY__NOT_READY)
 477   1                      ;
 478   1              // [CLKSEL - Clock Select]$
 479   1      
 480   1      }
 481          
 482          //================================================================================
 483          // TIMER01_0_enter_DefaultMode_from_RESET
 484          //================================================================================
 485          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 486   1              // $[Timer Initialization]
 487   1              //Save Timer Configuration
 488   1              uint8_t TCON_save;
 489   1              TCON_save = TCON;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 9   

 490   1              //Stop Timers
 491   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 492   1      
 493   1              // [Timer Initialization]$
 494   1      
 495   1              // $[TH0 - Timer 0 High Byte]
 496   1              // [TH0 - Timer 0 High Byte]$
 497   1      
 498   1              // $[TL0 - Timer 0 Low Byte]
 499   1              // [TL0 - Timer 0 Low Byte]$
 500   1      
 501   1              // $[TH1 - Timer 1 High Byte]
 502   1              /*
 503   1               // TH1 (Timer 1 High Byte) = 0x30
 504   1               */
 505   1              TH1 = (0x30 << TH1_TH1__SHIFT);
 506   1              // [TH1 - Timer 1 High Byte]$
 507   1      
 508   1              // $[TL1 - Timer 1 Low Byte]
 509   1              // [TL1 - Timer 1 Low Byte]$
 510   1      
 511   1              // $[Timer Restoration]
 512   1              //Restore Timer Configuration
 513   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 514   1      
 515   1              // [Timer Restoration]$
 516   1      
 517   1      }
 518          
 519          //================================================================================
 520          // TIMER16_2_enter_DefaultMode_from_RESET
 521          //================================================================================
 522          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 523   1              // $[Timer Initialization]
 524   1              // Save Timer Configuration
 525   1              uint8_t TMR2CN0_TR2_save;
 526   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 527   1              // Stop Timer
 528   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 529   1              // [Timer Initialization]$
 530   1      
 531   1              // $[TMR2CN1 - Timer 2 Control 1]
 532   1              // [TMR2CN1 - Timer 2 Control 1]$
 533   1      
 534   1              // $[TMR2CN0 - Timer 2 Control]
 535   1              // [TMR2CN0 - Timer 2 Control]$
 536   1      
 537   1              // $[TMR2H - Timer 2 High Byte]
 538   1              // [TMR2H - Timer 2 High Byte]$
 539   1      
 540   1              // $[TMR2L - Timer 2 Low Byte]
 541   1              // [TMR2L - Timer 2 Low Byte]$
 542   1      
 543   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 544   1              /*
 545   1               // TMR2RLH (Timer 2 Reload High Byte) = 0x44
 546   1               */
 547   1              TMR2RLH = (0x44 << TMR2RLH_TMR2RLH__SHIFT);
 548   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 549   1      
 550   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 551   1              /*
 552   1               // TMR2RLL (Timer 2 Reload Low Byte) = 0x80
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 10  

 553   1               */
 554   1              TMR2RLL = (0x80 << TMR2RLL_TMR2RLL__SHIFT);
 555   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 556   1      
 557   1              // $[TMR2CN0]
 558   1              /*
 559   1               // TR2 (Timer 2 Run Control) = RUN (Start Timer 2 running.)
 560   1               */
 561   1              TMR2CN0 |= TMR2CN0_TR2__RUN;
 562   1              // [TMR2CN0]$
 563   1      
 564   1              // $[Timer Restoration]
 565   1              // Restore Timer Configuration
 566   1              TMR2CN0 |= TMR2CN0_TR2_save;
 567   1              // [Timer Restoration]$
 568   1      
 569   1      }
 570          
 571          //================================================================================
 572          // TIMER16_3_enter_DefaultMode_from_RESET
 573          //================================================================================
 574          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 575   1              // $[Timer Initialization]
 576   1              // Save Timer Configuration
 577   1              uint8_t TMR3CN0_TR3_save;
 578   1              TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 579   1              // Stop Timer
 580   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 581   1              // [Timer Initialization]$
 582   1      
 583   1              // $[TMR3CN1 - Timer 3 Control 1]
 584   1              // [TMR3CN1 - Timer 3 Control 1]$
 585   1      
 586   1              // $[TMR3CN0 - Timer 3 Control]
 587   1              // [TMR3CN0 - Timer 3 Control]$
 588   1      
 589   1              // $[TMR3H - Timer 3 High Byte]
 590   1              // [TMR3H - Timer 3 High Byte]$
 591   1      
 592   1              // $[TMR3L - Timer 3 Low Byte]
 593   1              // [TMR3L - Timer 3 Low Byte]$
 594   1      
 595   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 596   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 597   1      
 598   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 599   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 600   1      
 601   1              // $[TMR3CN0]
 602   1              /*
 603   1               // TR3 (Timer 3 Run Control) = RUN (Start Timer 3 running.)
 604   1               */
 605   1              TMR3CN0 |= TMR3CN0_TR3__RUN;
 606   1              // [TMR3CN0]$
 607   1      
 608   1              // $[Timer Restoration]
 609   1              // Restore Timer Configuration
 610   1              TMR3CN0 |= TMR3CN0_TR3_save;
 611   1              // [Timer Restoration]$
 612   1      
 613   1      }
 614          
 615          //================================================================================
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 11  

 616          // TIMER_SETUP_0_enter_DefaultMode_from_RESET
 617          //================================================================================
 618          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 619   1              // $[CKCON0 - Clock Control 0]
 620   1              /*
 621   1               // SCA (Timer 0/1 Prescale) = SYSCLK_DIV_12 (System clock divided by 12.)
 622   1               // T0M (Timer 0 Clock Select) = SYSCLK (Counter/Timer 0 uses the system
 623   1               //     clock.)
 624   1               // T2MH (Timer 2 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 high
 625   1               //     byte uses the clock defined by T2XCLK in TMR2CN0.)
 626   1               // T2ML (Timer 2 Low Byte Clock Select) = SYSCLK (Timer 2 low byte uses
 627   1               //     the system clock.)
 628   1               // T3MH (Timer 3 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 high
 629   1               //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 630   1               // T3ML (Timer 3 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 low
 631   1               //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 632   1               // T1M (Timer 1 Clock Select) = SYSCLK (Timer 1 uses the system clock.)
 633   1               */
 634   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__SYSCLK
 635   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__SYSCLK
 636   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 637   1                              | CKCON0_T1M__SYSCLK;
 638   1              // [CKCON0 - Clock Control 0]$
 639   1      
 640   1              // $[CKCON1 - Clock Control 1]
 641   1              // [CKCON1 - Clock Control 1]$
 642   1      
 643   1              // $[TMOD - Timer 0/1 Mode]
 644   1              /*
 645   1               // T0M (Timer 0 Mode Select) = MODE1 (Mode 1, 16-bit Counter/Timer)
 646   1               // T1M (Timer 1 Mode Select) = MODE2 (Mode 2, 8-bit Counter/Timer with
 647   1               //     Auto-Reload)
 648   1               // CT0 (Counter/Timer 0 Select) = TIMER (Timer Mode. Timer 0 increments
 649   1               //     on the clock defined by T0M in the CKCON0 register.)
 650   1               // GATE0 (Timer 0 Gate Control) = DISABLED (Timer 0 enabled when TR0 = 1
 651   1               //     irrespective of INT0 logic level.)
 652   1               // CT1 (Counter/Timer 1 Select) = TIMER (Timer Mode. Timer 1 increments
 653   1               //     on the clock defined by T1M in the CKCON0 register.)
 654   1               // GATE1 (Timer 1 Gate Control) = DISABLED (Timer 1 enabled when TR1 = 1
 655   1               //     irrespective of INT1 logic level.)
 656   1               */
 657   1              TMOD = TMOD_T0M__MODE1 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 658   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 659   1              // [TMOD - Timer 0/1 Mode]$
 660   1      
 661   1              // $[TCON - Timer 0/1 Control]
 662   1              /*
 663   1               // TR1 (Timer 1 Run Control) = RUN (Start Timer 1 running.)
 664   1               */
 665   1              TCON |= TCON_TR1__RUN;
 666   1              // [TCON - Timer 0/1 Control]$
 667   1      
 668   1      }
 669          
 670          //================================================================================
 671          // SMBUS_0_enter_DefaultMode_from_RESET
 672          //================================================================================
 673          extern void SMBUS_0_enter_DefaultMode_from_RESET(void) {
 674   1              // $[SMB0ADR - SMBus 0 Slave Address]
 675   1              // [SMB0ADR - SMBus 0 Slave Address]$
 676   1      
 677   1              // $[SMB0ADM - SMBus 0 Slave Address Mask]
 678   1              // [SMB0ADM - SMBus 0 Slave Address Mask]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 12  

 679   1      
 680   1              // $[SMB0TC - SMBus 0 Timing and Pin Control]
 681   1              // [SMB0TC - SMBus 0 Timing and Pin Control]$
 682   1      
 683   1              // $[SMB0CF - SMBus 0 Configuration]
 684   1              /*
 685   1               // SMBCS (SMBus Clock Source Selection) = TIMER2_LOW (Timer 2 Low Byte
 686   1               //     Overflow.)
 687   1               // ENSMB (SMBus Enable) = ENABLED (Enable the SMBus module.)
 688   1               // SMBFTE (SMBus Free Timeout Detection Enable) = FREE_TO_ENABLED (Enable
 689   1               //     bus free timeouts. The bus the bus will be considered free if SCL and
 690   1               //     SDA remain high for more than 10 SMBus clock source periods.)
 691   1               // SMBTOE (SMBus SCL Timeout Detection Enable) = SCL_TO_ENABLED (Enable
 692   1               //     SCL low timeouts.)
 693   1               // EXTHOLD (SMBus Setup and Hold Time Extension Enable) = ENABLED (Enable
 694   1               //     SDA extended setup and hold times.)
 695   1               */
 696   1              SMB0CF |= SMB0CF_SMBCS__TIMER2_LOW | SMB0CF_ENSMB__ENABLED
 697   1                              | SMB0CF_SMBFTE__FREE_TO_ENABLED | SMB0CF_SMBTOE__SCL_TO_ENABLED
 698   1                              | SMB0CF_EXTHOLD__ENABLED;
 699   1              // [SMB0CF - SMBus 0 Configuration]$
 700   1      
 701   1      }
 702          
 703          //================================================================================
 704          // UART_0_enter_DefaultMode_from_RESET
 705          //================================================================================
 706          extern void UART_0_enter_DefaultMode_from_RESET(void) {
 707   1              // $[SCON0 - UART0 Serial Port Control]
 708   1              /*
 709   1               // REN (Receive Enable) = RECEIVE_ENABLED (UART0 reception enabled.)
 710   1               */
 711   1              SCON0 |= SCON0_REN__RECEIVE_ENABLED;
 712   1              // [SCON0 - UART0 Serial Port Control]$
 713   1      
 714   1      }
 715          
 716          //================================================================================
 717          // INTERRUPT_0_enter_DefaultMode_from_RESET
 718          //================================================================================
 719          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 720   1              // $[EIE1 - Extended Interrupt Enable 1]
 721   1              /*
 722   1               // EADC0 (ADC0 Conversion Complete Interrupt Enable) = DISABLED (Disable
 723   1               //     ADC0 Conversion Complete interrupt.)
 724   1               // EWADC0 (ADC0 Window Comparison Interrupt Enable) = DISABLED (Disable
 725   1               //     ADC0 Window Comparison interrupt.)
 726   1               // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
 727   1               //     interrupts.)
 728   1               // ECP1 (Comparator1 (CP1) Interrupt Enable) = DISABLED (Disable CP1
 729   1               //     interrupts.)
 730   1               // EMAT (Port Match Interrupts Enable) = DISABLED (Disable all Port Match
 731   1               //     interrupts.)
 732   1               // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = DISABLED
 733   1               //     (Disable all PCA0 interrupts.)
 734   1               // ESMB0 (SMBus (SMB0) Interrupt Enable) = ENABLED (Enable interrupt
 735   1               //     requests generated by SMB0.)
 736   1               // ET3 (Timer 3 Interrupt Enable) = ENABLED (Enable interrupt requests
 737   1               //     generated by the TF3L or TF3H flags.)
 738   1               */
 739   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 740   1                              | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__DISABLED
 741   1                              | EIE1_ESMB0__ENABLED | EIE1_ET3__ENABLED;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 13  

 742   1              // [EIE1 - Extended Interrupt Enable 1]$
 743   1      
 744   1              // $[EIE2 - Extended Interrupt Enable 2]
 745   1              // [EIE2 - Extended Interrupt Enable 2]$
 746   1      
 747   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 748   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 749   1      
 750   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 751   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 752   1      
 753   1              // $[EIP2 - Extended Interrupt Priority 2]
 754   1              // [EIP2 - Extended Interrupt Priority 2]$
 755   1      
 756   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 757   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 758   1      
 759   1              // $[IE - Interrupt Enable]
 760   1              /*
 761   1               // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 762   1               //     to its individual mask setting.)
 763   1               // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 764   1               //     interrupt 0.)
 765   1               // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 766   1               //     interrupt 1.)
 767   1               // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 768   1               //     interrupts.)
 769   1               // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 770   1               //     interrupt.)
 771   1               // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 772   1               //     interrupt.)
 773   1               // ET2 (Timer 2 Interrupt Enable) = ENABLED (Enable interrupt requests
 774   1               //     generated by the TF2L or TF2H flags.)
 775   1               // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 776   1               */
 777   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 778   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 779   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
 780   1              // [IE - Interrupt Enable]$
 781   1      
 782   1              // $[IP - Interrupt Priority]
 783   1              // [IP - Interrupt Priority]$
 784   1      
 785   1              // $[IPH - Interrupt Priority High]
 786   1              // [IPH - Interrupt Priority High]$
 787   1      
 788   1      }
 789          
 790          //================================================================================
 791          // USBLIB_0_enter_DefaultMode_from_RESET
 792          //================================================================================
 793          extern void USBLIB_0_enter_DefaultMode_from_RESET(void) {
 794   1              // $[USBD Init]
 795   1              USBD_Init (&initstruct);
 796   1              // [USBD Init]$
 797   1      
 798   1      }
 799          
 800          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
 801   1              // $[PCA Off]
 802   1              PCA0CN0_CR = PCA0CN0_CR__STOP;
 803   1              // [PCA Off]$
 804   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 14  

 805   1              // $[PCA0MD - PCA Mode]
 806   1              // [PCA0MD - PCA Mode]$
 807   1      
 808   1              // $[PCA0CENT - PCA Center Alignment Enable]
 809   1              /*
 810   1               // CEX0CEN (CEX0 Center Alignment Enable) = CENTER (Center-aligned.)
 811   1               // CEX1CEN (CEX1 Center Alignment Enable) = CENTER (Center-aligned.)
 812   1               // CEX2CEN (CEX2 Center Alignment Enable) = CENTER (Center-aligned.)
 813   1               */
 814   1              PCA0CENT = PCA0CENT_CEX0CEN__CENTER | PCA0CENT_CEX1CEN__CENTER
 815   1                              | PCA0CENT_CEX2CEN__CENTER;
 816   1              // [PCA0CENT - PCA Center Alignment Enable]$
 817   1      
 818   1              // $[PCA0CLR - PCA Comparator Clear Control]
 819   1              // [PCA0CLR - PCA Comparator Clear Control]$
 820   1      
 821   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 822   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 823   1      
 824   1              // $[PCA0H - PCA Counter/Timer High Byte]
 825   1              // [PCA0H - PCA Counter/Timer High Byte]$
 826   1      
 827   1              // $[PCA0POL - PCA Output Polarity]
 828   1              // [PCA0POL - PCA Output Polarity]$
 829   1      
 830   1              // $[PCA0PWM - PCA PWM Configuration]
 831   1              // [PCA0PWM - PCA PWM Configuration]$
 832   1      
 833   1              // $[PCA On]
 834   1              PCA0CN0_CR = PCA0CN0_CR__RUN;
 835   1              // [PCA On]$
 836   1      
 837   1      }
 838          
 839          extern void PCACH_0_enter_DefaultMode_from_RESET(void) {
 840   1              // $[PCA0 Settings Save]
 841   1              // Select Capture/Compare register)
 842   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 843   1              // [PCA0 Settings Save]$
 844   1      
 845   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 846   1              /*
 847   1               // CAPN (Channel 0 Capture Negative Function Enable) = DISABLED (Disable
 848   1               //     negative edge capture.)
 849   1               // ECCF (Channel 0 Capture/Compare Flag Interrupt Enable) = DISABLED
 850   1               //     (Disable CCF0 interrupts.)
 851   1               // MAT (Channel 0 Match Function Enable) = DISABLED (Disable match
 852   1               //     function.)
 853   1               // PWM16 (Channel 0 16-bit Pulse Width Modulation Enable) = 8_BIT (8 to
 854   1               //     11-bit PWM selected.)
 855   1               // CAPP (Channel 0 Capture Positive Function Enable) = DISABLED (Disable
 856   1               //     positive edge capture.)
 857   1               // ECOM (Channel 0 Comparator Function Enable) = ENABLED (Enable
 858   1               //     comparator function.)
 859   1               // PWM (Channel 0 Pulse Width Modulation Mode Enable) = ENABLED (Enable
 860   1               //     PWM function.)
 861   1               // TOG (Channel 0 Toggle Function Enable) = DISABLED (Disable toggle
 862   1               //     function.)
 863   1               */
 864   1              PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__DISABLED
 865   1                              | PCA0CPM0_MAT__DISABLED | PCA0CPM0_PWM16__8_BIT
 866   1                              | PCA0CPM0_CAPP__DISABLED | PCA0CPM0_ECOM__ENABLED
 867   1                              | PCA0CPM0_PWM__ENABLED | PCA0CPM0_TOG__DISABLED;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 15  

 868   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 869   1      
 870   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 871   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 872   1      
 873   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 874   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 875   1      
 876   1              // $[Auto-reload]
 877   1              // [Auto-reload]$
 878   1      
 879   1              // $[PCA0 Settings Restore]
 880   1              // [PCA0 Settings Restore]$
 881   1      
 882   1      }
 883          
 884          extern void PCACH_1_enter_DefaultMode_from_RESET(void) {
 885   1              // $[PCA0 Settings Save]
 886   1              // Select Capture/Compare register)
 887   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 888   1              // [PCA0 Settings Save]$
 889   1      
 890   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
 891   1              /*
 892   1               // CAPN (Channel 1 Capture Negative Function Enable) = DISABLED (Disable
 893   1               //     negative edge capture.)
 894   1               // ECCF (Channel 1 Capture/Compare Flag Interrupt Enable) = DISABLED
 895   1               //     (Disable CCF1 interrupts.)
 896   1               // MAT (Channel 1 Match Function Enable) = DISABLED (Disable match
 897   1               //     function.)
 898   1               // PWM16 (Channel 1 16-bit Pulse Width Modulation Enable) = 8_BIT (8 to
 899   1               //     11-bit PWM selected.)
 900   1               // CAPP (Channel 1 Capture Positive Function Enable) = DISABLED (Disable
 901   1               //     positive edge capture.)
 902   1               // ECOM (Channel 1 Comparator Function Enable) = ENABLED (Enable
 903   1               //     comparator function.)
 904   1               // PWM (Channel 1 Pulse Width Modulation Mode Enable) = ENABLED (Enable
 905   1               //     PWM function.)
 906   1               // TOG (Channel 1 Toggle Function Enable) = DISABLED (Disable toggle
 907   1               //     function.)
 908   1               */
 909   1              PCA0CPM1 = PCA0CPM1_CAPN__DISABLED | PCA0CPM1_ECCF__DISABLED
 910   1                              | PCA0CPM1_MAT__DISABLED | PCA0CPM1_PWM16__8_BIT
 911   1                              | PCA0CPM1_CAPP__DISABLED | PCA0CPM1_ECOM__ENABLED
 912   1                              | PCA0CPM1_PWM__ENABLED | PCA0CPM1_TOG__DISABLED;
 913   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
 914   1      
 915   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
 916   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
 917   1      
 918   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
 919   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
 920   1      
 921   1              // $[Auto-reload]
 922   1              // [Auto-reload]$
 923   1      
 924   1              // $[PCA0 Settings Restore]
 925   1              // [PCA0 Settings Restore]$
 926   1      
 927   1      }
 928          
 929          extern void PCACH_2_enter_DefaultMode_from_RESET(void) {
 930   1              // $[PCA0 Settings Save]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/29/2016 00:06:38 PAGE 16  

 931   1              // Select Capture/Compare register)
 932   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 933   1              // [PCA0 Settings Save]$
 934   1      
 935   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
 936   1              /*
 937   1               // CAPN (Channel 2 Capture Negative Function Enable) = DISABLED (Disable
 938   1               //     negative edge capture.)
 939   1               // ECCF (Channel 2 Capture/Compare Flag Interrupt Enable) = DISABLED
 940   1               //     (Disable CCF2 interrupts.)
 941   1               // MAT (Channel 2 Match Function Enable) = DISABLED (Disable match
 942   1               //     function.)
 943   1               // PWM16 (Channel 2 16-bit Pulse Width Modulation Enable) = 8_BIT (8 to
 944   1               //     11-bit PWM selected.)
 945   1               // CAPP (Channel 2 Capture Positive Function Enable) = DISABLED (Disable
 946   1               //     positive edge capture.)
 947   1               // ECOM (Channel 2 Comparator Function Enable) = ENABLED (Enable
 948   1               //     comparator function.)
 949   1               // PWM (Channel 2 Pulse Width Modulation Mode Enable) = ENABLED (Enable
 950   1               //     PWM function.)
 951   1               // TOG (Channel 2 Toggle Function Enable) = DISABLED (Disable toggle
 952   1               //     function.)
 953   1               */
 954   1              PCA0CPM2 = PCA0CPM2_CAPN__DISABLED | PCA0CPM2_ECCF__DISABLED
 955   1                              | PCA0CPM2_MAT__DISABLED | PCA0CPM2_PWM16__8_BIT
 956   1                              | PCA0CPM2_CAPP__DISABLED | PCA0CPM2_ECOM__ENABLED
 957   1                              | PCA0CPM2_PWM__ENABLED | PCA0CPM2_TOG__DISABLED;
 958   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
 959   1      
 960   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
 961   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
 962   1      
 963   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
 964   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
 965   1      
 966   1              // $[Auto-reload]
 967   1              // [Auto-reload]$
 968   1      
 969   1              // $[PCA0 Settings Restore]
 970   1              // [PCA0 Settings Restore]$
 971   1      
 972   1      }
 973          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    292    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
