C51 COMPILER V9.53.0.0   CALLBACK                                                          03/28/2016 20:18:26 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE CALLBACK
OBJECT MODULE PLACED IN .\src/callback.OBJ
COMPILER INVOKED BY: Z:\home\pp\SimplicityStudio_v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe /home/pp/apps/u2f-ze
                    -ro/firmware/src/callback.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(9,SIZE) INTVE
                    -CTOR(0X0000) INTPROMOTE INCDIR(/home/pp/apps/u2f-zero/firmware/inc/config;/home/pp/apps/u2f-zero/firmware/inc;/home/pp/a
                    -pps/u2f-zero/firmware/tinyprintf;/home/pp/apps/u2f-zero/firmware/tests;/home/pp/SimplicityStudio_v3/developer/sdks/si805
                    -1/v3//Device/shared/si8051Base;/home/pp/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/EFM8UB1;/home/pp/Simplicity
                    -Studio_v3/developer/sdks/si8051/v3//Device/EFM8UB1/inc;/home/pp/SimplicityStudio_v3/developer/sdks/si8051/v3//Lib/efm8_u
                    -sb/inc;/home/pp/SimplicityStudio_v3/developer/sdks/si8051/v3//Device/EFM8UB1/peripheral_driver/inc;/home/pp/SimplicitySt
                    -udio_v3/developer/sdks/si8051/v3//Lib/efm8_assert) REGFILE(u2f-firmware.ORC) PRINT(.\src/callback.lst) COND PAGEWIDTH(12
                    -0) PAGELENGTH(65) OBJECT(.\src/callback.OBJ)

line level    source

   1          /*******************************************************************************
   2           * @file callback.c
   3           * @brief USB Callbacks.
   4           *******************************************************************************/
   5          
   6          //=============================================================================
   7          // src/callback.c: generated by Hardware Configurator
   8          //
   9          // This file is only generated if it does not exist. Modifications in this file
  10          // will persist even if Configurator generates code. To refresh this file,
  11          // you must first delete it and then regenerate code.
  12          //=============================================================================
  13          //-----------------------------------------------------------------------------
  14          // Includes
  15          //-----------------------------------------------------------------------------
  16          #include <SI_EFM8UB1_Register_Enums.h>
  17          #include <efm8_usb.h>
  18          #include <stdio.h>
  19          #include "idle.h"
  20          #include "app.h"
  21          #include "bsp.h"
  22          #include "descriptors.h"
  23          #include "u2f_hid.h"
  24          
  25          #define HID_INTERFACE_INDEX 0
  26          
  27          uint8_t tmpBuffer;
  28          
  29          //#define PRINT_EVENTS
  30          
  31          #ifdef PRINT_EVENTS
              
              #define u2f_print_ev(s) u2f_prints(s)
              
              #else
  36          #define u2f_print_ev(x)
  37          #endif
  38          
  39          
  40          void USBD_ResetCb(void) {
  41   1              u2f_print_ev("USBD_ResetCb\r\n");
  42   1      }
  43          
  44          
  45          void USBD_DeviceStateChangeCb(USBD_State_TypeDef oldState,
  46                          USBD_State_TypeDef newState) {
  47   1              u2f_print_ev("USBD_DeviceStateChangeCb\r\n");
  48   1      }
C51 COMPILER V9.53.0.0   CALLBACK                                                          03/28/2016 20:18:26 PAGE 2   

*** WARNING C280 IN LINE 45 OF /home/pp/apps/u2f-zero/firmware/src/callback.c: 'oldState': unreferenced local variable
*** WARNING C280 IN LINE 46 OF /home/pp/apps/u2f-zero/firmware/src/callback.c: 'newState': unreferenced local variable
  49          
  50          bool USBD_IsSelfPoweredCb(void) {
  51   1              return false;
  52   1      }
  53          
  54          
  55          USB_Status_TypeDef USBD_SetupCmdCb(
  56                          SI_VARIABLE_SEGMENT_POINTER(setup, USB_Setup_TypeDef, MEM_MODEL_SEG)) {
  57   1      
  58   1              USB_Status_TypeDef retVal = USB_STATUS_REQ_UNHANDLED;
  59   1      
  60   1      
  61   1              if ((setup->bmRequestType.Type == USB_SETUP_TYPE_STANDARD)
  62   1                              && (setup->bmRequestType.Direction == USB_SETUP_DIR_IN)
  63   1                              && (setup->bmRequestType.Recipient == USB_SETUP_RECIPIENT_INTERFACE)) {
  64   2                      // A HID device must extend the standard GET_DESCRIPTOR command
  65   2                      // with support for HID descriptors.
  66   2      
  67   2                      switch (setup->bRequest) {
  68   3                      case GET_DESCRIPTOR:
  69   3                              if ((setup->wValue >> 8) == USB_HID_REPORT_DESCRIPTOR) {
  70   4                                      switch (setup->wIndex) {
  71   5                                      case 0: // Interface 0
  72   5                                              USBD_Write(EP0, ReportDescriptor0,
  73   5                                                              EFM8_MIN(sizeof(ReportDescriptor0), setup->wLength),
  74   5                                                              false);
  75   5                                              retVal = USB_STATUS_OK;
  76   5                                              break;
  77   5      
  78   5                                      default: // Unhandled Interface
  79   5                                              break;
  80   5                                      }
  81   4                              } else if ((setup->wValue >> 8) == USB_HID_DESCRIPTOR) {
  82   4                                      switch (setup->wIndex) {
  83   5                                      case 0: // Interface 0
  84   5                                              USBD_Write(EP0, (&configDesc[18]),
  85   5                                                              EFM8_MIN(USB_HID_DESCSIZE, setup->wLength), false);
  86   5                                              retVal = USB_STATUS_OK;
  87   5                                              break;
  88   5      
  89   5                                      default: // Unhandled Interface
  90   5                                              break;
  91   5                                      }
  92   4                              }
  93   3                              break;
  94   3                      }
  95   2              }
  96   1              else if ((setup->bmRequestType.Type == USB_SETUP_TYPE_CLASS)
  97   1                         && (setup->bmRequestType.Recipient == USB_SETUP_RECIPIENT_INTERFACE)
  98   1                         && (setup->wIndex == HID_INTERFACE_INDEX))
  99   1                {
 100   2                  // Implement the necessary HID class specific commands.
 101   2                  switch (setup->bRequest)
 102   2                  {
 103   3                    case USB_HID_SET_REPORT:
 104   3                        u2f_print_ev("output report\r\n");
 105   3                      break;
 106   3      
 107   3                    case USB_HID_GET_REPORT:
 108   3      
 109   3                      break;
C51 COMPILER V9.53.0.0   CALLBACK                                                          03/28/2016 20:18:26 PAGE 3   

 110   3      
 111   3                    case USB_HID_SET_IDLE:
 112   3                      if (((setup->wValue & 0xFF) == 0)             // Report ID
 113   3                          && (setup->wLength == 0)
 114   3                          && (setup->bmRequestType.Direction != USB_SETUP_DIR_IN))
 115   3                      {
 116   4                        idleTimerSet(setup->wValue >> 8);
 117   4                        retVal = USB_STATUS_OK;
 118   4                      }
 119   3                      else u2f_print_ev("unhandled USB_HID_SET_IDLE\r\n");
 120   3                      break;
 121   3      
 122   3                    case USB_HID_GET_IDLE:
 123   3                      if ((setup->wValue == 0)                      // Report ID
 124   3                          && (setup->wLength == 1)
 125   3                          && (setup->bmRequestType.Direction == USB_SETUP_DIR_IN))
 126   3                      {
 127   4                        u2f_print_ev("get idle\r\n");
 128   4                        tmpBuffer = idleGetRate();
 129   4                        USBD_Write(EP0, &tmpBuffer, 1, false);
 130   4                        retVal = USB_STATUS_OK;
 131   4                      }
 132   3                      else u2f_print_ev("unhandled USB_HID_GET_IDLE\r\n");
 133   3                      break;
 134   3                    default:
 135   3                        u2f_print_ev("unhandled setup->bRequest\r\n");
 136   3                  }
 137   2                }
 138   1                else
 139   1                {
 140   2      
 141   2                }
 142   1      
 143   1              return retVal;
 144   1      }
 145          
 146          
 147          uint8_t hidmsgbuf[64];
 148          
 149          uint16_t USBD_XferCompleteCb(uint8_t epAddr, USB_Status_TypeDef status,
 150                          uint16_t xferred, uint16_t remaining) {
 151   1      
 152   1      
 153   1              if (epAddr == EP1OUT)
 154   1              {
 155   2                      dump_hex(hidmsgbuf, sizeof(hidmsgbuf));
 156   2      
 157   2                      set_app_u2f_hid_msg((struct u2f_hid_msg *) hidmsgbuf );
 158   2      
 159   2              }
 160   1      
 161   1      
 162   1              return 0;
 163   1      }
*** WARNING C280 IN LINE 149 OF /home/pp/apps/u2f-zero/firmware/src/callback.c: 'status': unreferenced local variable
*** WARNING C280 IN LINE 150 OF /home/pp/apps/u2f-zero/firmware/src/callback.c: 'xferred': unreferenced local variable
*** WARNING C280 IN LINE 150 OF /home/pp/apps/u2f-zero/firmware/src/callback.c: 'remaining': unreferenced local variable
 164          
 165          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    465    ----
C51 COMPILER V9.53.0.0   CALLBACK                                                          03/28/2016 20:18:26 PAGE 4   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     65      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
